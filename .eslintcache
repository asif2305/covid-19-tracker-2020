[{"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\index.js":"1","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\App.js":"2","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\reportWebVitals.js":"3","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\InfoBox.js":"4","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\Table.js":"5","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\util.js":"6","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\LineGraph.js":"7","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\Maps.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":4955,"mtime":1608163092117,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":936,"mtime":1608161481438,"results":"13","hashOfConfig":"10"},{"size":448,"mtime":1608153359816,"results":"14","hashOfConfig":"10"},{"size":1923,"mtime":1608161623888,"results":"15","hashOfConfig":"10"},{"size":2935,"mtime":1608162909815,"results":"16","hashOfConfig":"10"},{"size":783,"mtime":1608156616492,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1w36o6e",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\index.js",[],["36","37"],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\App.js",["38"],"import './App.css';\nimport React, { useEffect, useState } from 'react'\nimport Infobox from './InfoBox'\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\nimport Maps from './Maps'\nimport Table from './Table'\nimport { sortData, prettyPrintStat } from './util'\nimport LineGraph from './LineGraph'\nimport {\n  MenuItem, FormControl, Select\n} from \"@material-ui/core\"\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\n  // state:how to write variable in REACT\n  // https://disease.sh/v3/covid-19/countries\n  // USEEFFECT = Runs a piece of code based on a given condition\n  const [countries, setCountries] = useState([]) // hook\n  const [country, setCountry] = useState('worldwide') // hook\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // fetch everything\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data)\n      });\n\n  }, []);\n  // dropdown data\n  useEffect(() => {\n    // The code inside here will run once\n    // when the component loads and not again\n    // async-> send a request,wait for it,do something with it\n    const getContriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States\n            value: country.countryInfo.iso2 // UK,USA\n          }));\n          const sortedData = sortData(data); // sorting the data\n          setTableData(sortedData);\n          setMapCountries(data)\n          setCountries(countries);\n        });\n\n    };\n    getContriesData();\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode)\n    //console.log('oncncnc', mapCountries)\n    // https://disease.sh/v3/covid-19/all\n    // https://disease.sh/v3/covid-19/countries\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        // all of the data from the country response\n        setCountryInfo(data)\n        // set data for map\n        if (countryCode === \"worldwide\") {\n          setMapCenter([34.80746, -40.4796]);\n        }\n        else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n\n        setMapZoom(4);\n      })\n\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          {/*Header */}\n          {/*Title + select input dropdown field */}\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select onChange={onCountryChange} variant=\"outlined\" value={country}>\n              {/*loop through all the countries*/}\n              <MenuItem value={\"worldwide\"}>Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n\n          </FormControl>\n\n        </div>\n        {/*Infobox title=Corona virus cases */}\n        {/*Infobox */}\n        {/*Infobox */}\n        <div className=\"app__stats\">\n          <Infobox isRed active={casesType === \"cases\"} onClick={(e) => setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} ></Infobox>\n          <Infobox active={casesType === \"recovered\"} onClick={(e) => setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}></Infobox>\n          <Infobox isRed active={casesType === \"deaths\"} onClick={(e) => setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}></Infobox>\n\n        </div>\n\n        {/* Map  */}\n        <Maps casesType={casesType} countryCircle={mapCountries} center={mapCenter} zoom={mapZoom} ></Maps>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          {/*Table */}\n          <Table countries={tableData}></Table>\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          {/*Graph */}\n          <LineGraph className=\"app__graph\" casesType={casesType}></LineGraph>\n        </CardContent>\n\n      </Card>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\reportWebVitals.js",[],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\InfoBox.js",[],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\Table.js",[],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\util.js",[],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\LineGraph.js",[],"D:\\File\\Self Learning\\WEB\\React Project\\COVID19Tracker\\covid-19-tracker\\src\\Maps.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":4,"column":29,"nodeType":"45","messageId":"46","endLine":4,"endColumn":39},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]